import { FileConfig } from '../generateProject';
import { indent } from '../util';
import { getTypeForSearchValue } from '../getType';
import { writeFileSync, appendFileSync } from 'fs';
import { join } from 'path';

export function generateFile(config: FileConfig): { output: string } {

  generateSearchColumnValues(config)
  generateSearchFilterValues(config)
  generateSearchJoinValues(config)

  const { data } = config;
  const output = `
// This file is automatically generated - don't edit it. 
// Search Types for record ${data.label} (${data.id})

// Search Columns

${generateSearchColumn(config).output}


// Search Filters

${generateSearchFilter(config).output}


// Search Joins

${generateSearchJoins(config).output}


// Search Filter Types

${generateSearchFilterTypes(config).output}


// Search Column Types

${generateSearchColumnTypes(config).output}

`.trim()

  return { output }
}


export function generateSearchColumn(config: FileConfig): { output: string } {
  const { data } = config;
  let output: string = ''
  if (data.searchData) {
    output = `import { ${data.searchData}SearchColumn } from './${data.searchData}'
/** ${data.label} (${data.id}) Search Columns definition */
export interface ${data.id}SearchColumn extends ${data.searchData}SearchColumn {

}`
  }
  else {
    output = `
/** ${data.label} (${data.id}) Search Columns definition */
export interface ${data.id}SearchColumn {
  ${data.searchColumns.map(c => {
      const type = getTypeForSearchValue(c.type);
      return `
    ${indent()}/** ${c.label} (${c.id}: ${c.type}) */
    ${indent()}${c.id}?: ${type};
    `.trim()
    }).join(`\n${indent()}`)}
}`.trim()
  }
  return { output }
}


export function generateSearchFilter(config: FileConfig): { output: string } {
  const { data } = config;
  const output = `
/** ${data.label} (${data.id}) Search Filters definition */
export interface ${data.id}SearchFilter {
${data.searchFilters.map(c => {
    const type = getTypeForSearchValue(c.type);
    return `
/** ${c.label} (${c.id}: ${c.type}) */
${indent()}${c.id}?: ${type};
`.trim()
  }).join(`\n${indent()}`)}
}`.trim()
  return { output }
}


export function generateSearchJoins(config: FileConfig): { output: string } {
  const { data } = config;
  const output = `
/** ${data.label} (${data.id}) Search Joins definitions. */
export interface ${data.id}SearchJoinTypes {
${data.searchJoins.map(c => {
    return `
/** ${data.id}'s ${c.id} search filter. ${c.description}. Actual name: ${c.actualName}. */
${indent()}${c.id}: '${c.id}';
`.trim()
  }).join(`\n${indent()}`)}
}`.trim()
  return { output }
}

export function generateSearchFilterTypes(config: FileConfig): { output: string } {
  const { data } = config;
  const output = `
/** ${data.label} (${data.id}) Search Filter Type definitions. */
export interface ${data.id}SearchFilterTypes {
${data.searchFilters.map(c => {
    return `
${indent()}${c.id}: '${c.type}';
`.trim()
  }).join(`\n${indent()}`)}
}`.trim()
  return { output }
}

export function generateSearchColumnTypes(config: FileConfig): { output: string } {
  const { data } = config;
  const output = `
/** ${data.label} (${data.id}) Search Column Type definitions. */
export interface ${data.id}SearchColumnTypes {
${data.searchColumns.map(c => {
    return `
${indent()}${c.id}: '${c.type}';
`.trim()
  }).join(`\n${indent()}`)}
}`.trim()
  return { output }
}


export function generateSearchColumnValues(config: FileConfig) {
  const { data } = config;
  const output = `
/** ${data.label} (${data.id}) Search Column values so they can be loaded dynamically. */
export const ${data.id}SearchColumnValues = [
${data.searchColumns.map(c => {
    return `
${indent()}{id: '${c.id}', type: '${c.type}', label: '${c.label.replace(/\'/g, '\\\'')}'}`.trim()
  }).join(`,\n${indent()}`)}
];
`
  const out = join(config.outputFolder, `TypedSearchColumnValues.ts`)
  appendFileSync(out, output)
}

export function generateSearchFilterValues(config: FileConfig) {
  const { data } = config;
  const output = `
/** ${data.label} (${data.id}) Search Filter values so they can be loaded dynamically. */
export const ${data.id}SearchFilterValues = [
${data.searchFilters.map(c => {
    return `
${indent()}{id: '${c.id}', type: '${c.type}', label: '${c.label.replace(/\'/g, '\\\'')}'}`.trim()
  }).join(`,\n${indent()}`)}
];
`
  const out = join(config.outputFolder, `TypedSearchFilterValues.ts`)
  appendFileSync(out, output)
}

export function generateSearchJoinValues(config: FileConfig) {
  const { data } = config;
  const output = `
/** ${data.label} (${data.id}) Search Join values so they can be loaded dynamically. */
export const ${data.id}SearchJoinValues = [
${data.searchJoins.map(c => {
    return `
${indent()}{id: '${c.id}', description: '${c.description.replace(/\'/g, '\\\'')}', actualName: '${c.actualName.replace(/\'/g, '\\\'')}'}`.trim()
  }).join(`,\n${indent()}`)}
];
`
  const out = join(config.outputFolder, `TypedSearchJoinValues.ts`)
  appendFileSync(out, output)
}



